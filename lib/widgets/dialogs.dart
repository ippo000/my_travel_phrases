import 'package:flutter/material.dart';
import '../services/ai_service.dart';
import 'loading_with_tips.dart';

class Dialogs {
  static void showAddPhraseDialog({
    required BuildContext context,
    required AiService aiService,
    required Function(Map<String, String>) onPhraseAdded,
  }) {
    final japaneseController = TextEditingController();
    final englishController = TextEditingController();
    final pronunciationController = TextEditingController();
    bool isAiLoading = false;

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setDialogState) => AlertDialog(
          title: const Text('Êñ∞„Åó„ÅÑ„Éï„É¨„Éº„Ç∫„ÇíËøΩÂä†'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: japaneseController,
                decoration: InputDecoration(
                  labelText: 'Êó•Êú¨Ë™û',
                  hintText: '‰æã: „Åì„Çì„Å´„Å°„ÅØ',
                  suffixIcon: IconButton(
                    icon: isAiLoading
                        ? const SizedBox(
                            width: 16,
                            height: 16,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          )
                        : const Icon(Icons.auto_awesome),
                    onPressed: isAiLoading
                        ? null
                        : () async {
                            if (japaneseController.text.isEmpty) return;

                            if (!aiService.isConfigured) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(content: Text('Gemini API„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')),
                              );
                              return;
                            }

                            setDialogState(() {
                              isAiLoading = true;
                            });

                            try {
                              final result = await aiService.translatePhrase(japaneseController.text);
                              if (result != null) {
                                englishController.text = result['english']!;
                                pronunciationController.text = result['pronunciation']!;
                              }
                            } catch (e) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(content: Text('AIÁøªË®≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: $e')),
                              );
                            } finally {
                              setDialogState(() {
                                isAiLoading = false;
                              });
                            }
                          },
                    tooltip: 'AIÁøªË®≥',
                  ),
                ),
              ),
              if (isAiLoading) ...[
                const SizedBox(height: 16),
                const LoadingWithTips(),
              ],
              if (!isAiLoading) ...[
                const SizedBox(height: 8),
                TextField(
                  controller: englishController,
                  decoration: const InputDecoration(
                    labelText: 'Ëã±Ë™û',
                    hintText: '‰æã: Hello',
                  ),
                ),
                const SizedBox(height: 8),
                TextField(
                  controller: pronunciationController,
                  decoration: const InputDecoration(
                    labelText: 'Áô∫Èü≥Ôºà„Ç´„Çø„Ç´„ÉäÔºâ',
                    hintText: '‰æã: „Éè„É≠„Éº',
                  ),
                ),
              ],
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('„Ç≠„É£„É≥„Çª„É´'),
            ),
            TextButton(
              onPressed: () {
                if (japaneseController.text.isNotEmpty &&
                    englishController.text.isNotEmpty &&
                    pronunciationController.text.isNotEmpty) {
                  onPhraseAdded({
                    'japanese': japaneseController.text,
                    'english': englishController.text,
                    'pronunciation': pronunciationController.text,
                  });
                  Navigator.of(context).pop();
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('„Éï„É¨„Éº„Ç∫„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü')),
                  );
                }
              },
              child: const Text('ËøΩÂä†'),
            ),
          ],
        ),
      ),
    );
  }

  static void showAiChatDialog({
    required BuildContext context,
    required AiService aiService,
  }) {
    final messageController = TextEditingController();
    List<Map<String, String>> chatHistory = [];
    bool isChatLoading = false;

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setChatState) => AlertDialog(
          title: const Text('ü§ñ AI‰ºöË©±Á∑¥Áøí'),
          content: SizedBox(
            width: double.maxFinite,
            height: 400,
            child: Column(
              children: [
                Expanded(
                  child: chatHistory.isEmpty
                      ? const Center(
                          child: Text('„Ç¢„Ç§„É´„É©„É≥„ÉâÊóÖË°å„ÅÆ„Ç∑„ÉÅ„É•„Ç®„Éº„Ç∑„Éß„É≥„Åß‰ºöË©±Á∑¥Áøí„Åó„Åæ„Åó„Çá„ÅÜÔºÅ'),
                        )
                      : ListView.builder(
                          itemCount: chatHistory.length,
                          itemBuilder: (context, index) {
                            final message = chatHistory[index];
                            final isUser = message['sender'] == 'user';
                            return Align(
                              alignment: isUser
                                  ? Alignment.centerRight
                                  : Alignment.centerLeft,
                              child: Container(
                                margin: const EdgeInsets.symmetric(vertical: 4),
                                padding: const EdgeInsets.all(12),
                                decoration: BoxDecoration(
                                  color: isUser
                                      ? Theme.of(context).colorScheme.primary
                                      : Theme.of(context).colorScheme.surfaceVariant,
                                  borderRadius: BorderRadius.circular(12),
                                ),
                                child: Text(
                                  message['text']!,
                                  style: TextStyle(
                                    color: isUser
                                        ? Theme.of(context).colorScheme.onPrimary
                                        : Theme.of(context).colorScheme.onSurfaceVariant,
                                  ),
                                ),
                              ),
                            );
                          },
                        ),
                ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: messageController,
                        decoration: const InputDecoration(
                          hintText: '„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ...',
                          border: OutlineInputBorder(),
                        ),
                        onSubmitted: (text) => _sendMessage(text, messageController, chatHistory, setChatState, aiService, isChatLoading),
                      ),
                    ),
                    const SizedBox(width: 8),
                    IconButton(
                      onPressed: isChatLoading
                          ? null
                          : () => _sendMessage(messageController.text, messageController, chatHistory, setChatState, aiService, isChatLoading),
                      icon: isChatLoading
                          ? const SizedBox(
                              width: 16,
                              height: 16,
                              child: CircularProgressIndicator(strokeWidth: 2),
                            )
                          : const Icon(Icons.send),
                    ),
                  ],
                ),
                if (isChatLoading) ...[
                  const SizedBox(height: 16),
                  const LoadingWithTips(),
                ],
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Èñâ„Åò„Çã'),
            ),
          ],
        ),
      ),
    );
  }

  static Future<void> _sendMessage(
    String text,
    TextEditingController messageController,
    List<Map<String, String>> chatHistory,
    StateSetter setChatState,
    AiService aiService,
    bool isChatLoading,
  ) async {
    if (text.isNotEmpty && !isChatLoading) {
      setChatState(() {
        chatHistory.add({'sender': 'user', 'text': text});
        isChatLoading = true;
      });
      messageController.clear();

      try {
        final response = await aiService.chatWithAi(text);
        if (response != null) {
          setChatState(() {
            chatHistory.add({'sender': 'ai', 'text': response});
          });
        }
      } catch (e) {
        setChatState(() {
          chatHistory.add({
            'sender': 'ai',
            'text': 'Sorry, I\'m having trouble responding right now.',
          });
        });
      } finally {
        setChatState(() {
          isChatLoading = false;
        });
      }
    }
  }

  static void showAboutDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Ireland Travel Phrases'),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Version: 1.2.0'),
            SizedBox(height: 8),
            Text('„Ç¢„Ç§„É´„É©„É≥„ÉâÊóÖË°å„Åß‰Ωø„Åà„ÇãÂÆüÁî®ÁöÑ„Å™Ëã±‰ºöË©±„Éï„É¨„Éº„Ç∫ÈõÜ„Åß„Åô„ÄÇ'),
            SizedBox(height: 8),
            Text('üáÆüá™ „Ç¢„Ç§„É´„É©„É≥„Éâ„Å™„Åæ„Çä„ÅÆÈü≥Â£∞„Å´ÂØæÂøúÔºà„Ç™„Éï„É©„Ç§„É≥ÂØæÂøúÔºâ'),
            SizedBox(height: 8),
            Text('ü§ñ Gemini AI„ÅßÁøªË®≥„Éª‰ºöË©±Á∑¥ÁøíÊ©üËÉΩ'),
            SizedBox(height: 8),
            Text('„Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº:'),
            Text(
              'Êú¨„Ç¢„Éó„É™„ÅØÂÄã‰∫∫ÊÉÖÂ†±„ÇíÂèéÈõÜ„Åó„Åæ„Åõ„Çì„ÄÇAIÊ©üËÉΩ„ÅØ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ',
              style: TextStyle(fontSize: 12),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }
}